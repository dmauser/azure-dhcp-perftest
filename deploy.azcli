# Check existing default Azure subscription
az account list --query "[?isDefault == \`true\`].{Name:name, IsDefault:isDefault}" -o table --all

# Change default Azure subscription as neeeded
# az account set --subscription "Visual Studio Enterprise"

# Parameters (change as needed)
rgname="lab-dhcp-perftest"
location="westeurope"
azvnetname="az-vnet"
azvnetprefix="10.1.0.0/24"
azsubnetname="main"
onpremvnetname="onprem-vnet"
onpremvnetprefix="192.168.1.0/24"
onpremsubnetname="main"
vmsize="Standard_DS1_v2"
username="azureuser"
password="Msft123Msft123"

# Create a resource group.
echo "Creating resource group..."
az group create --name $rgname-$location --location $location -o none

# Create Azure VNET and subnet
echo "Creating Azure VNET and subnet..."
az network vnet create --resource-group $rgname-$location --name $azvnetname --address-prefixes $azvnetprefix --subnet-name $azsubnetname --subnet-prefixes $azvnetprefix -o none
# Create On-prem VNET and subnet
az network vnet create --resource-group $rgname-$location --name $onpremvnetname --address-prefixes $onpremvnetprefix --subnet-name $onpremsubnetname --subnet-prefixes $onpremvnetprefix -o none

# Create VNET peering between on-prem and Azure VNETs
echo "Creating VNET peering between on-prem and Azure VNETs..."
az network vnet peering create --resource-group $rgname-$location --name $azvnetname-to-$onpremvnetname --vnet-name $azvnetname --remote-vnet $onpremvnetname --allow-vnet-access -o none
az network vnet peering create --resource-group $rgname-$location --name $onpremvnetname-to-$azvnetname --vnet-name $onpremvnetname --remote-vnet $azvnetname --allow-vnet-access -o none

# Create NSG and associate to all subnets
echo "Creating NSG and associating to all subnets..."
az network nsg create --resource-group $rgname-$location --name nsg-$location -o none
az network vnet subnet update --resource-group $rgname-$location --vnet-name $azvnetname --name $azsubnetname --network-security-group nsg-$location -o none
az network vnet subnet update --resource-group $rgname-$location --vnet-name $onpremvnetname --name $onpremsubnetname --network-security-group nsg-$location -o none

# Create Azure VM
echo "Creating VMs..."
az vm create --resource-group $rgname-$location --name az-dhcp-server --vnet-name $azvnetname --subnet $azsubnetname --public-ip-address "" --nsg "" --image Ubuntu2204 --size $vmsize --admin-username $username --admin-password $password --no-wait -o none --only-show-errors
# Create On-prem VM
az vm create --resource-group $rgname-$location --name onprem-dhcp-client --vnet-name $onpremvnetname --subnet $onpremsubnetname --public-ip-address "" --nsg "" --image Ubuntu2204 --size $vmsize --admin-username $username --admin-password $password --no-wait -o none --only-show-errors

# Use a for loop to wait for all VMs to be ready
echo "Waiting for VMs to be ready..."
for vm in $(az vm list --resource-group $rgname-$location --query "[].name" -o tsv)
do
    az vm wait --resource-group $rgname-$location --name $vm --created -o none
done

# Enable boot diagnostics all vms in the resource group
echo "Enabling boot diagnostics for all VMs in the resource group..."
az vm boot-diagnostics enable --ids $(az vm list --resource-group $rgname-$location --query "[].id" -o tsv) -o none

echo Installing tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others  
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools2204.sh"
for vm in `az vm list -g $rgname-$location --query "[?contains(storageProfile.imageReference.offer, 'ubuntu')].name" -o tsv`
do
 az vm extension set \
 --resource-group $rgname-$location \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools2204.sh\"}" \
 --force-update \
 --no-wait
done

# Enable auto-shutdown for all vms in the resource group at 4am UTC
echo "Enabling auto-shutdown for all VMs in the resource group at 4am UTC..."
az vm auto-shutdown --ids $(az vm list --resource-group $rgname-$location --query "[].id" -o tsv) --time 0400 -o none

# Configure DHCP client using custom script extension
echo "Configuring DHCP client using custom script extension..."
dhcpclienturi="https://raw.githubusercontent.com/dmauser/azure-dhcp-perftest/main/script/dhcpclient.sh"
az vm extension set \
 --resource-group $rgname-$location \
 --vm-name onprem-dhcp-client \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$dhcpclienturi\"],\"commandToExecute\": \"./dhcpclient.sh\"}" \
 --force-update \
 --no-wait  

# Configure DHCP server using custom script extension
echo "Configuring DHCP server using custom script extension..."
dhcpserveruri="https://raw.githubusercontent.com/dmauser/azure-dhcp-perftest/main/script/dhcpserver.sh"
az vm extension set \
 --resource-group $rgname-$location \
 --vm-name az-dhcp-server \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$dhcpserveruri\"],\"commandToExecute\": \"./dhcpserver.sh\"}" \
 --force-update \
 --no-wait


